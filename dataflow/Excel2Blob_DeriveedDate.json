{
	"name": "Excel2Blob_DeriveedDate",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TransactionhistoryWithCost",
						"type": "DatasetReference"
					},
					"name": "ExcelSrc"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DestinationDataset_8fa",
						"type": "DatasetReference"
					},
					"name": "BlobTarget"
				}
			],
			"transformations": [
				{
					"name": "AddDatetime"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "CountItems"
				}
			],
			"script": "source(output(\n\t\t{Item number} as string,\n\t\t{Item Name} as string,\n\t\tConfiguration as string,\n\t\t{From Zone Group Id} as string,\n\t\t{To Zone Group Id} as string,\n\t\t{From Warehouse} as string,\n\t\t{To Warehouse} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\tSite as string,\n\t\t{Service tag} as string,\n\t\t{Serial number} as string,\n\t\t{Inventory status} as string,\n\t\t{TRANSACTION TYPE} as string,\n\t\t{License plate} as string,\n\t\t{Inventoryreason ID} as string,\n\t\tTrackingnumber as string,\n\t\tReference as string,\n\t\tNumber as string,\n\t\tReceipt as string,\n\t\tIssue as string,\n\t\tQuantity as short,\n\t\t{Pay after use} as boolean,\n\t\t{Standard Cost} as double,\n\t\t{Transaction cost} as double,\n\t\t{User ID} as string,\n\t\t{Commodity Code} as string,\n\t\tISEMC as boolean,\n\t\t{Physical date} as string,\n\t\t{Financial date} as string,\n\t\t{Voucher Id} as string,\n\t\t{Msg Id} as string,\n\t\t{Manifest ID} as string,\n\t\t{Status Ack} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ExcelSrc\nConditionalSplit1@Split derive(LoadDateTime = currentDate()) ~> AddDatetime\nModifyColumns1 split(startsWith({Item number},'4'),\n\tdisjoint: false) ~> ConditionalSplit1@(Split)\nExcelSrc derive({Item number} = lower({Item number})) ~> ModifyColumns1\nAddDatetime aggregate(groupBy({Item number}),\n\tTotal_Items = countDistinct({Item number})) ~> CountItems\nCountItems sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BlobTarget"
		}
	}
}